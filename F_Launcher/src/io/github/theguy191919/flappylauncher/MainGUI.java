/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.theguy191919.flappylauncher;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.lwjgl.LWJGLException;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;

/**
 *
 * @author root
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<String>();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Flappy Byrd Launcher");
        setIconImages(this.getImages());
        setResizable(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setPreferredSize(new java.awt.Dimension(507, 380));

        jPanel2.setPreferredSize(new java.awt.Dimension(370, 157));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/theguy191919/flappylauncher/PreviewR.png"))); // NOI18N
        jLabel5.setName(""); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setText("Resolution");

        jLabel2.setText("Full Screen");

        jLabel3.setText("V Sync");

        jLabel4.setText("Debug");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(this.getResulutions())
        );
        jComboBox1.setSelectedIndex(this.getDefaultIndex());

        jCheckBox1.setSelected("true".equalsIgnoreCase(PropertyWriter.getProperty("fullscreen", "true"))
        );

        jCheckBox2.setSelected(Boolean.parseBoolean(PropertyWriter.getProperty("vsync", "false"))
        );

        jCheckBox3.setSelected(Boolean.parseBoolean(PropertyWriter.getProperty("debug", "false"))
        );
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setMaximumSize(new java.awt.Dimension(32767, 10));
        jPanel5.setMinimumSize(new java.awt.Dimension(100, 10));
        jPanel5.setPreferredSize(new java.awt.Dimension(0, 10));

        jButton1.setText("Play!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Quit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new Launcher().launch(displaymode[this.jComboBox1.getSelectedIndex()].getWidth(), displaymode[this.jComboBox1.getSelectedIndex()].getHeight(), this.jCheckBox3.isSelected(), this.jCheckBox1.isSelected(), this.jCheckBox2.isSelected(), this);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.quit();
    }//GEN-LAST:event_jButton2ActionPerformed


    @Override
    public synchronized void addWindowListener(WindowListener wl) {
        super.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent winevent) {
                MainGUI.mainGUI.quit();
            }
        });
    }

    public void quit() {
        PropertyWriter.setProperty("fullscreen", String.valueOf(this.jCheckBox1.isSelected()));
        PropertyWriter.setProperty("vsync", String.valueOf(this.jCheckBox2.isSelected()));
        PropertyWriter.setProperty("debug", String.valueOf(this.jCheckBox3.isSelected()));
        PropertyWriter.setProperty("resolution", String.valueOf(this.jComboBox1.getSelectedIndex()));
        PropertyWriter.stop();
        System.exit(0);
    }

    public void guiAway() {
        this.setVisible(false);
    }
    
    public void guiShow(){
        this.setVisible(true);
    }
    
    private int getDefaultIndex(){
        int index = Integer.valueOf(PropertyWriter.getProperty("resolution", "0"));
        if(index >= this.getResulutions().length){
            index = 0;
        }
        return index;
    }
  
  public void setProgress(int percentage)
  {
    this.jProgressBar1.setValue(percentage);
  }
  
  private Object[] getResulutions()
  {
    List<String> list = new LinkedList();
    try
    {
      displaymode = MainGUI.orderList(Display.getAvailableDisplayModes());
      for (DisplayMode mode : displaymode) {
        if (mode.isFullscreenCapable()) {
          list.add(mode.getWidth() + "x" + mode.getHeight() + "*" + mode.getBitsPerPixel() + "_" + mode.getFrequency());
        }
      }
    }
    catch (LWJGLException ex)
    {
      Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
    }
    return list.toArray();
  }
  
  private List<Image> getImages(){
      List<Image> listOfImage = new ArrayList<Image>();
//        try {
//            
//            listOfImage.add((ImageIO.read(this.getClass().getClassLoader().getResource("io/github/theguy191919/flappylauncher/Bird1.png")).getScaledInstance(16, -1, Image.SCALE_SMOOTH)));
//            listOfImage.add((ImageIO.read(this.getClass().getClassLoader().getResource("io/github/theguy191919/flappylauncher/Bird1.png")).getScaledInstance(32, -1, Image.SCALE_SMOOTH)));
//            listOfImage.add((ImageIO.read(this.getClass().getClassLoader().getResource("io/github/theguy191919/flappylauncher/Bird1.png")).getScaledInstance(64, -1, Image.SCALE_SMOOTH)));
//            listOfImage.add((ImageIO.read(this.getClass().getClassLoader().getResource("io/github/theguy191919/flappylauncher/Bird1.png")).getScaledInstance(128, -1, Image.SCALE_SMOOTH)));
//            listOfImage.add((ImageIO.read(this.getClass().getClassLoader().getResource("io/github/theguy191919/flappylauncher/Bird1.png")).getScaledInstance(256, -1, Image.SCALE_SMOOTH)));
//            listOfImage.add((ImageIO.read(this.getClass().getClassLoader().getResource("io/github/theguy191919/flappylauncher/Bird1.png")).getScaledInstance(512, -1, Image.SCALE_SMOOTH)));
//            
//        } catch (IOException ex) {
//            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
        return listOfImage;
  }
  
  private static DisplayMode[] orderList(DisplayMode[] list){
      for(int a = 0; a < list.length - 1; a++){
          for(int b = list.length - 1; b > a; b--){
              if(list[b].getWidth() > list[b - 1].getWidth() || (list[b].getWidth() == list[b - 1].getWidth() && list[b].getHeight() >= list[b - 1].getHeight())){
                  DisplayMode mode1 = list[b];
                  list[b] = list[b - 1];
                  list[b - 1] = mode1;
                  //goOn = true;
              }
          }
          
//          int check = list.length - 1;
//          boolean goOn = true;
//          
//          while(check > a + 1 && goOn){
//              if(list[check].getWidth() > list[check - 1].getWidth() || (list[check].getWidth() == list[check - 1].getWidth() && list[check].getHeight() >= list[check - 1].getHeight())){
//                  DisplayMode mode1 = list[check];
//                  list[check] = list[check - 1];
//                  list[check - 1] = mode1;
//                  //goOn = true;
//              } else {
//                  goOn = false;
//              }
//              
//              check--;
//          }
      }
      return list;
  }
    
    public static MainGUI mainGUI;
    public static DisplayMode[] displaymode;
    //public static String os;
    public static String nativeLocation;
    public static String gameJar;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws URISyntaxException {
        
        //System.getProperty(, "lib/native/"); 
        String platform = System.getProperty("io.github.theguy191919.theengine.platform");
        if(platform == null){
            platform = "";
        }
        
        //String currentDir = "./";
//        
//        try {
//            File testLocation = new File("./Thisiscurrentlocation.txt");
//            testLocation.createNewFile();
//            FileOutputStream steam = new FileOutputStream(testLocation);
//            steam.write(testLocation.getAbsolutePath().getBytes());
//            steam.write("\n".getBytes());
//            steam.write(new String("user.dir: " + System.getProperty("user.dir") + "\n").getBytes());
//            steam.write(new String("java.home: " + System.getProperty("java.home") + "\n").getBytes());
//            steam.write(new String("user.home: " + System.getProperty("user.home") + "\n").getBytes());
//            steam.write(new String("current dir: " + new File(new String(MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().toString())).getParent()).getBytes());
//            //currentDir = MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().toString().substring(5);
//            steam.flush();
//            steam.close();
//        } catch (IOException ex) {
//            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
        //System.out.println(platform);
        //System.getProperties().list(System.out);
        if(platform.equalsIgnoreCase("osxapp")){
            try {
//                System.out.println("File URL: " + URLDecoder.decode(MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().toURL().getFile(), "UTF-8"));
//                System.out.println("File: " + new File(new String(MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().toString())).getAbsolutePath());
//                System.out.println("Parent: " + new File(new String(MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().toString())).getParent());
//                System.out.println("Parent absolute: " + new File(new String(MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().toString())).getParentFile().getAbsolutePath());
                MainGUI.nativeLocation = new File(URLDecoder.decode(MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().toURL().getFile(), "UTF-8")).getParentFile().getAbsolutePath();
                System.setProperty("org.lwjgl.librarypath", new File(URLDecoder.decode(MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().toURL().getFile(), "UTF-8")).getParentFile().getAbsolutePath());
                MainGUI.gameJar = new File(URLDecoder.decode(MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().toURL().getFile(), "UTF-8")).getParentFile().getAbsolutePath() + "/Flappy_B.jar";
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else {
            MainGUI.gameJar = "Flappy_B.jar";
            if (System.getProperty("os.name").contains("Windows")) {
                System.setProperty("org.lwjgl.librarypath", new File("lib/native/windows").getAbsolutePath());
                MainGUI.nativeLocation = "lib/native/windows";
                //os = "Windows";
            } else if (System.getProperty("os.name").contains("Mac")) {
                System.setProperty("org.lwjgl.librarypath", new File("lib/native/macosx").getAbsolutePath());
                MainGUI.nativeLocation = "lib/native/macosx";
                //os = "Mac";
            } else if (System.getProperty("os.name").contains("Linux")) {
                System.setProperty("org.lwjgl.librarypath", new File("lib/native/linux").getAbsolutePath());
                MainGUI.nativeLocation = "lib/native/linux";
                //os = "Linux";
            } else if (System.getProperty("os.name").contains("Sun")) {
                System.setProperty("org.lwjgl.librarypath", new File("lib/native/solaris").getAbsolutePath());
                MainGUI.nativeLocation = "lib/native/solaris";
                //os = "Sun";
            } else {
                throw new RuntimeException("Your OS is not supported");
            }
            
        }
        PropertyWriter.start();

        //String path = new File(MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath()).getAbsolutePath();
        //System.out.println(path);
        //System.load(path + File.separator + "lib" + File.separator + "native" + File.separator + "linux" + File.separator + "liblwjgl64.so");
        //System.load(path + File.separator + "lib" + File.separator + "native" + File.separator + "linux" + File.separator + "liblwjgl.so");
        //System.load(path + File.separator + "lib" + File.separator + "native" + File.separator + "linux" + File.separator + "libjinput-linux.so");
        //System.load(path + File.separator + "lib" + File.separator + "native" + File.separator + "linux" + File.separator + "libjinput-linux64.so");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainGUI gui = new MainGUI();
                gui.setVisible(true);
                MainGUI.mainGUI = gui;
                try {
                    for(DisplayMode modes : Display.getAvailableDisplayModes()){
                        //System.out.println(modes.getWidth() + "x" + modes.getHeight() + "*" + modes.getBitsPerPixel() + "_" + modes.getFrequency() + "|" + modes.isFullscreenCapable());
                    }
                } catch (LWJGLException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
